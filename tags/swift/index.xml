<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Swift on Zephan </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://shitoudev.github.io/tags/swift/</link>
    <language>en-us</language>
    
    
    <updated>Fri, 11 Mar 2016 17:20:14 CST</updated>
    
    <item>
      <title>Swift: 避免 C 样式的循环</title>
      <link>http://shitoudev.github.io/post/swift-avoiding-c-style-for-loops/</link>
      <pubDate>Fri, 11 Mar 2016 17:20:14 CST</pubDate>
      
      <guid>http://shitoudev.github.io/post/swift-avoiding-c-style-for-loops/</guid>
      <description>&lt;p&gt;作者：Thomas Hanning &lt;a href=&#34;http://www.thomashanning.com/avoiding-c-style-for-loops/&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md&#34;&gt;C样式的循环将会在 Swift 3 中被移除&lt;/a&gt;。一开始看到似乎有点奇怪，但是 Swift 提供了更好的循环结构。&lt;/p&gt;

&lt;h4 id=&#34;c样式的循环:b8bcb7b51e839cbb3588711f19cf4d33&#34;&gt;C样式的循环&lt;/h4&gt;

&lt;p&gt;让我们先来看看C样式的循环：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let programmingLanguages = [&amp;quot;Swift&amp;quot;,&amp;quot;Objective-C&amp;quot;,&amp;quot;Java&amp;quot;]

for var i = 0; i &amp;lt; programmingLanguages.count; i++ {
    print(&amp;quot;index: \(i), value: \(programmingLanguages[i])&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码运行没问题，但是它既不好用也不够 “swifty”。实际上，它不太容易学习和记忆。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何在一个iOS项目中使用 Objective-C 和 Swift</title>
      <link>http://shitoudev.github.io/post/how-to-use-both-swift-and-objective-c-in-one-project/</link>
      <pubDate>Thu, 28 Jan 2016 12:37:22 CST</pubDate>
      
      <guid>http://shitoudev.github.io/post/how-to-use-both-swift-and-objective-c-in-one-project/</guid>
      <description>&lt;p&gt;作者：Thomas Hanning &lt;a href=&#34;http://www.thomashanning.com/swift-and-objective-c-interoperability/&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Objective-C 和 Swift 能很好的交互，所以在同一个项目中可以很容易的同时使用两者。&lt;/p&gt;

&lt;h4 id=&#34;在-swift-文件中使用-objective-c-写的代码:e0b5762b2f2ffeaad5924c2f723e02a2&#34;&gt;在 Swift 文件中使用 Objective-C 写的代码&lt;/h4&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;你可以在一个我们称它为 &lt;code&gt;bridging-header&lt;/code&gt; 文件里面导入 Objective-C 文件。Xcode 会把这些（Objc 文件）转换成 Swift 可用，后面使用起来就感觉和 Swift 一样了。&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;创建 &lt;code&gt;bridging-header&lt;/code&gt; 文件很容易，新建 Objective-C 类的时候，如果你的项目里面还没有 &lt;code&gt;bridging-header&lt;/code&gt; 文件，Xcode 会提示你来新建（译注：确认之后建立的文件名是：项目名-Bridging-Header.h）。当然你可以选择不创建而自己手动来建立，直接新建 Objective-C 头文件，取名：Bridging-Header.h（译注：你也可以另外取个），然后定位到 “Build Settings”
 里面的 “Swift Compiler – Code generation” 设置项，把 “Objective-C Bridging Header” 设置成刚才的文件名。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Swift 中的父类里面使用 IBInspectable 属性</title>
      <link>http://shitoudev.github.io/post/adding-ibinspectable-to-a-superclass-in-swift/</link>
      <pubDate>Wed, 20 Jan 2016 12:28:30 CST</pubDate>
      
      <guid>http://shitoudev.github.io/post/adding-ibinspectable-to-a-superclass-in-swift/</guid>
      <description>&lt;p&gt;作者：Jameson Quave &lt;a href=&#34;http://jamesonquave.com/blog/adding-ibinspectable-to-a-superclass-in-swift/&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;一个非常有用的功能就是在代码里面添加 IBInspectable 属性的背景图片。在一个娱乐类的应用里面，我写了一个可设计的 Cell，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@IBDesignable
class TrailerCollectionViewCell: MediaCollectionViewCell {
    @IBOutlet weak var lengthLabel: UILabel!
    @IBInspectable weak var bgImage: UIImage! {
        didSet {
            imgView.frame = self.bounds
            self.addSubview(imgView)
            imgView.image = bgImage
            imgView.contentMode  = UIViewContentMode.Center
            self.sendSubviewToBack(imgView)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Swift Magic: Public Getter, Private Setter</title>
      <link>http://shitoudev.github.io/post/swift-magic-public-getter-private-setter/</link>
      <pubDate>Tue, 12 Jan 2016 11:13:59 CST</pubDate>
      
      <guid>http://shitoudev.github.io/post/swift-magic-public-getter-private-setter/</guid>
      <description>&lt;p&gt;作者：Natasha The Robot &lt;a href=&#34;https://www.natashatherobot.com/swift-magic-public-getter-private-setter/&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;在我的这篇 &lt;a href=&#34;https://www.natashatherobot.com/swift-dependency-injection-with-a-custom-initializer/&#34;&gt;Constructor Injection&lt;/a&gt; blog中，我写了一个结构体的例子，它有一个属性，属性可以从外部读取，但是写权限只能在内部，之前的代码看起来是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Counter {
    // `count` here has to be a var 
    // but I never want to set the `count` externally, 
    // so I made it private
    private var count: Int

    // so this is the only way to access the count externally
    func getCount() {
        return count
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

